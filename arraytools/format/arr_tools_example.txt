Function... _demo
  args.... ()
  kwargs.. {}
  docs.... 
    : - Produce a structured a stuctured array from an ndarray
    : - Print information for that array
    : - Show the array with the fields reordered
    : - Use row formatting for a multidimensional array
    : - Script documentation
    

: ----- _demo --------------------------------------------------------------
:
:Input ndarray, 'a' ...
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

:Input ndarray, 'b' ...
array([(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11)], 
      dtype=[('A', '<i4'), ('B', '<i4'), ('C', '<i4'), ('D', '<i4')])

:Input ndarray, 'c' ...
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])

:
:---- Functions by number  ---------------------------------------------
:(1)  arr2xyz(a, verbose=False)
    [[ 0  0  0]
     [ 1  0  1]
     [ 2  0  2]
     [ 3  0  3]
     [ 0  1  4]
     [ 1  1  5]
     [ 2  1  6]
     [ 3  1  7]
     [ 0  2  8]
     [ 1  2  9]
     [ 2  2 10]
     [ 3  2 11]]

:(2)  block_arr(a, win=[2, 2], nodata=-1)
    [[[0 1]
      [4 5]]
    
     [[2 3]
      [6 7]]
    
     [[8 9]
      [- -]]
    
     [[10 11]
      [- -]]]

:(3) change(b, order=['B', 'C', 'A'], prn=False
:    Array 'b', reordered with 2 fields dropped...
array([[(1, 2, 0)],
       [(5, 6, 4)],
       [(9, 10, 8)]], 
      dtype=[('B', '<i4'), ('C', '<i4'), ('A', '<i4')])

:(4)  col_hdr() ... just return column headers
    
             1         2         3         4         5         6         
    123456789012345678901234567890123456789012345678901234567890123456789
    ----------------------------------------------------------------------

:(5) deline(c)  ... remove excessive blank lines
    
    Main array... 
    shape: (2, 3, 4)
    [0,...] (3, 4)
      .[[ 0  1  2  3]
      . [ 4  5  6  7]
      . [ 8  9 10 11]]
    [1,...] (3, 4)
      .[[12 13 14 15]
      . [16 17 18 19]
      . [20 21 22 23]]

:(6) doc_func(col_hdr) ... documenting a function...
    
    :----------------------------------------------------------------------
    : ---- doc_func(func) ----
    :Code for a function on line...467...
       0  def col_hdr():
       1      """Print numbers from 1 to 70 to show column positions"""
       2      args = [(('{:<10}')*7).format(*'0123456789'), '0123456789'*7, '-'*70]
       3      s = "\n{}\n{}\n{}".format(args[0][1:], args[1][1:], args[2]) #*args)
       4      return s
    
    :Comments preceeding function
    # ----------------------------------------------------------------------
    # (4) col_hdr ... code section .....
    
    :function?... True ... or method? False
    :Module name...
    arr_tools
    :
    :----------------------------------------------------------------------


:(8) frmt_(c) ... Array 'c' shape=(2, 3, 4) using frmt_
Array...
-shape (2, 3, 4), ndim 3
  .  0  1  2  3   12 13 14 15  
  .  4  5  6  7   16 17 18 19  
  .  8  9 10 11   20 21 22 23  


:(9) frmt_ma(e) ... Masked Array 'e' using frmt_ma

:Masked array... ndim: 3

:.. a[0, :2, :2] ...
  .  0  1
  .  4  5

:.. a[1, :2, :2] ...
  .  2  3
  .  6  7

:.. a[2, :2, :2] ...
  .  8  9
  .  -  -

:.. a[3, :2, :2] ...
  . 10 11
  .  -  -


:(12) in_by(a) ... Array 'a' indent using in_by
Header information
    [[ 0  1  2  3]
     [ 4  5  6  7]
     [ 8  9 10 11]]

:(12a) same but with line numbers
With line numbers...
00  [[ 0  1  2  3]
01   [ 4  5  6  7]
02   [ 8  9 10 11]]

:(13) info(d) ... info for array 'd'
    
    :---------------------
    :Array information....
    :array
    :  |__shape (2, 3, 4, 5)
    :  |__ndim  4
    :  |__size  120
    :  |__bytes 480
    :  |__type  <class 'numpy.ndarray'>
    :  |__strides  (240, 80, 20, 4)
    :dtype      int32
    :  |__kind  i
    :  |__char  l
    :  |__num   7
    :  |__type  <class 'numpy.int32'>
    :  |__name  int32
    :  |__shape ()
    :  |__description
    :     |__name, itemsize
    :     |__['', '<i4']
    :---------------------

:(14) make_blocks() ... construct a block array ...
[[0 0 1 1 2 2]
 [0 0 1 1 2 2]
 [3 3 4 4 5 5]
 [3 3 4 4 5 5]
 [6 6 7 7 8 8]
 [6 6 7 7 8 8]]

:(15) make_flds() ... create default field names ...
    [('col_00', '<i8'), ('col_01', '<i8'), ('col_02', '<i8')]

:(16) nd_struct() ... make a structured array from another array ...
array([(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11)], 
      dtype=[('A', '<i4'), ('B', '<i4'), ('C', '<i4'), ('D', '<i4')])

:(19) scale() ... scale an array up by an integer factor...
    [[ 0  0  1  1  2  2  3  3]
     [ 0  0  1  1  2  2  3  3]
     [ 4  4  5  5  6  6  7  7]
     [ 4  4  5  5  6  6  7  7]
     [ 8  8  9  9 10 10 11 11]
     [ 8  8  9  9 10 10 11 11]]

:(20) stride() ... stride an array ....
    [[[ 0  1  2]
      [ 4  5  6]
      [ 8  9 10]]
    
     [[ 1  2  3]
      [ 5  6  7]
      [ 9 10 11]]]